name: Save LinkedIn Token

on:
  workflow_dispatch:
    inputs:
      code:
        description: 'code from callback page'
        required: true
      redirect_uri:
        description: 'EXACT redirect URI used during authorization'
        required: true
        default: https://dice-research.org/oauth/linkedin/callback/index.html

permissions:
  contents: read
  actions: write

jobs:
  exchange:
    runs-on: ubuntu-22.04
    steps:
      - name: Exchange code â†’ tokens
        env:
          CODE: ${{ github.event.inputs.code }}
          CLIENT_ID: ${{ vars.LINKEDIN_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.LINKEDIN_CLIENT_SECRET }}
          REDIRECT_URI: ${{ github.event.inputs.redirect_uri }}
        run: |
          set -e
          TOKENS=$(curl -s https://www.linkedin.com/oauth/v2/accessToken \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode grant_type=authorization_code \
              --data-urlencode code="$CODE" \
              --data-urlencode redirect_uri="$REDIRECT_URI" \
              --data-urlencode client_id="$CLIENT_ID" \
              --data-urlencode client_secret="$CLIENT_SECRET")
          echo "$TOKENS" > tokens.json

          ACCESS_TOKEN=$(python - <<'PY'
          import json
          j=json.load(open('tokens.json'))
          print(j.get('access_token', ''))
          PY
          )
          REFRESH_TOKEN=$(python - <<'PY'
          import json
          j=json.load(open('tokens.json'))
          print(j.get('refresh_token', ''))
          PY
          )

          EXPIRES_IN=$(python - << 'PY'
          import json
          j=json.load(open('tokens.json'))
          print(j.get('expires_in'))
          PY
          )

          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
              echo "Token exchange failed:"
              cat tokens.json
              exit 1
          fi

          echo "::add-mask::$ACCESS_TOKEN"
          if [ -n "$REFRESH_TOKEN" ]; then echo "::add-mask::$REFRESH_TOKEN"; fi
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
          echo "REFRESH_TOKEN=$REFRESH_TOKEN" >> $GITHUB_ENV
          echo "::notice title=Token expires in::${EXPIRES_IN}s"

      - name: Save as repo secrets (access + refresh) and redirect URI
        env:
          GH_TOKEN: ${{ secrets.GH_ADMIN_PAT }}
          REDIRECT_URI: ${{ github.event.inputs.redirect_uri }}
        run: |
          echo "$GH_TOKEN" | gh auth login --with-token
          gh secret set LINKEDIN_ACCESS_TOKEN --repo "$GITHUB_REPOSITORY" --body "$ACCESS_TOKEN"
          echo "Saved LINKEDIN_ACCESS_TOKEN"
          if [ -n "$REFRESH_TOKEN" ] && [ "$REFRESH_TOKEN" != "null" ]; then
            gh secret set LINKEDIN_REFRESH_TOKEN --repo "$GITHUB_REPOSITORY" --body "$REFRESH_TOKEN"
            echo "Saved LINKEDIN_REFRESH_TOKEN"
          fi
